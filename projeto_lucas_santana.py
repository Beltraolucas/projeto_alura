# -*- coding: utf-8 -*-
"""Projeto_Lucas_Santana.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DOGxFwS5xM9_t1oZp9V4geAzHSCJP7lZ
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#################################
# --- Agente 1: Organizador --- #
#################################
def agente_organizador(itens_solicitados):

    organizador = Agent(
        name="agente_organizador",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assitente de um materiais de construção. A sua tarefa é criar uma tabela com os itens solicitados.
        A formatação da tabela deve ser da seguinte maneira: a primeira coluna representa o número do item solicitado,
        a segunda coluna terá como título "referência" mas ficará vazia por enquanto, a terceira coluna o nome do item solicitado,
        a quarta coluna a unidade da quantidade solicitada, a quinta coluna a quantidade solicitada, a sexta coluna valor unitário
        mas ficará vazia por enquanto e a sétima coluna terá o título de valor total mas ficará fazia por enquanto.
        Lembre-se que a resposta deve ser formatada como uma tabela.
        Por exemplo:
        #####
        Gostaria de um orçamento de dois sacos de cimento, 1 metro cúbico de areia, 2 metros de fio elétrico, 50 tijolo cerâmico, 1 tinta acrílica, 10 metros de tubo de PVC, 4 conexões de PVC e 2 metros de eletroduto corrugado.
        Espero que a sua resposta seja da seguinte maneira, só que fomatado como uma tabela:
        Número do item, Referência, Nome do item, Unidade, Quantidade, Valor unitário, Valor total
        1, , Cimento, kg, 2, ,
        2, , Areia, m3, 1, ,
        3, , Fio elétrico, m, 2, ,
        4, , tijolo cerâmico, Un, 50, ,
        5, , tinta acrílica, Lata, 1, ,
        6, , tubo de PVC, m, 10, ,
        7, , conexões de PVC, Un, 4, ,
        8, , Eletroduto corrugado, m, 2, ,
        #####
        """,
        description="Agente que organiza a solicitação",
    )

    entrada_do_agente_organizador = itens_solicitados

    tabela_organizada = call_agent(organizador, entrada_do_agente_organizador)
    return tabela_organizada

################################
# --- Agente 2: Financeiro --- #
################################
def agente_financeiro(tabela_apos_organizacao):
    calculador = Agent(
        name="agente_financeiro",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assistente de um vendedor de um materiais de construção.
        Você tem como referência a seguinte tabela:

        ####
        Referência, Nome do Item, Unidade, Valor initário (R$)
        1, Areia, Metro cúbico, 50
        2, Argamassa, Pacote de 20kg, 20
        3, Bloco de concreto, Unidade, 1
        4, Brita, Metro cúbico, 40
        5, Caixa de passagem (elétricas), Unidade, 5
        6, Cal, Pacote de 20kg, 15
        7, Cimento, Pacote de 50kg, 25
        8, Disjuntor, Unidade, 10
        9, Eletroduto corrugado, Metro, 5
        10, Fio elétrico, Metro, 2
        11, Lâmpadas (LED), Unidade, 10
        12, Piso cerâmico, Metro quadrado, 50
        13, Porcelanato, Metro quadrado, 100
        14, Sifão flexível, Unidade, 10
        15, Telha de fibrocimento, Unidade, 50
        16, Tinta acrílica, Unidade, 80
        17, Tijolo cerâmico, Unidade, 0.50
        18, Tubo de PVC, Metro, 5
        19, Conexão de PVC, Unidade, 5
        20, Vergalhão de aço, Unidade, 10
        ####

        Você receberá uma tabela com os itens solicitados, mas qua ainda não está completamente preenchida.
        Seu papel é completar os campos em branco dessa tabela em função dos itens solicitados, usando como referência sua tabela de referência.
        A última coluna consistirá da multiplicação da coluna "Quantidade" pela coluna "Valor unitário".
        Caso exista um Nome do item que não pertence a sua tabela de referência, avise que não trabalhamos com esse item e exclua a linha da tabela.
        Lembre-se de considerar prováveis erros de digitação.
        Lembre-se também de manter a formatação da tabela que você recebeu.
        Por exemplo:
        #####
        Você recebeu a seguinte tabela:
        Número do item, Referência, Nome do item, Unidade, Quantidade, Valor unitário, Valor total
        1, , Cimento, kg, 2, ,
        2, , Areia, m3, 1, ,
        3, , Fio elétrico, m, 2, ,
        4, , tijolo cerâmico, Un, 50, ,
        5, , tinta acrílica, Lata, 1, ,
        6, , tubo de PVC, m, 10, ,
        7, , conexões de PVC, Un, 4, ,
        8, , Eletroduto corrugado, m, 2, ,
        Eu espero que você devolva a seguinte tabela:
        Número do item, Referência, Nome do item, Unidade, Quantidade, Valor unitário, Valor total
        1, 7, Cimento, kg, 2, 25, 50
        2, 1, Areia, m3, 1, 50, 50
        3, 10, Fio elétrico, m, 2, 2, 4
        4, 17, tijolo cerâmico, Un, 50, 0.50, 25
        5, 16, tinta acrílica, Lata, 1, 80, 80
        6, 18, tubo de PVC, m, 10, 5, 50
        7, 19, conexões de PVC, Un, 4, 5, 20
        8, 9, Eletroduto corrugado, m, 2, 5, 10
        #####
        """,
        description="Agente que calcula o valor dos intens solicitados",
        tools=[google_search]
    )

    entrada_do_agente_financeiro = tabela_apos_organizacao
    # Executa o agente
    tabela_financeira = call_agent(calculador, entrada_do_agente_financeiro)
    return tabela_financeira

##########################################
# --- Agente 3: Revisor de Qualidade --- #
##########################################
def agente_revisor(tabela_antes_da_revisao):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.0-flash",
        instruction="""
            Você é um assistente do setor de vendas de um material de contrução, seu objetivo e verificar coerencia dos orçamentos que você recebe.
            Você receberá um tabela e deve verificar se todas as linhas estão preenchidas.
            Caso você encontre o alguma linha da coluna "Referência" vazia, você deve avisar que não trabalhamos com o item solicitado.
            Caso isso aconteça, exclua as linhas com a coluna "Referência" vazia.
            Além disso, você deve adicionar uma nova linha na parte inferior da tabela com o valor total da compra.
            Lembre-se de mostrar a tabela completa com as modificações.
            """,
        description="Agente revisor de orçamentos."
    )
    entrada_do_agente_revisor = tabela_antes_da_revisao
    # Executa o agente
    orcamento_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return orcamento_revisado

print("🚀 Iniciando o Sistema de Criação de Orçamentos com 3 Agentes 🚀")

# --- Obter o Tópico do Usuário ---
itens_solicitados = input("❓ Por favor, digite os itens que você gostaria de incluir no orçamento: ")

# Inserir lógica do sistema de agentes ################################################
if not itens_solicitados:
    print("Você esqueceu de digitar os itens!")
else:
    print("Maravilha! Vamos montar seu orçamento.")

    resultado_da_organizacao = agente_organizador(itens_solicitados)
    print("\n--- 📝 Resultado do Agente 1 (Organizador) ---\n")
    display(to_markdown(resultado_da_organizacao))
    print("--------------------------------------------------------------")

    previa_do_orcamento = agente_financeiro(resultado_da_organizacao)
    print("\n--- 📝 Resultado do Agente 2 (Financeiro) ---\n")
    display(to_markdown(previa_do_orcamento))
    print("--------------------------------------------------------------")

    orcamento = agente_revisor(previa_do_orcamento)
    print("\n--- 📝 Resultado do Agente 3 (Revisor) ---\n")
    display(to_markdown(orcamento))
    print("--------------------------------------------------------------")